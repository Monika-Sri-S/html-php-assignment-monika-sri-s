1)
<? php
$capital=67;
print(“Variable capital is $capital”);
print(“Variable CaPiTaL is $CaPiTaL”);
?>
output:
Variable capital is 67
Variable CaPiTaL is 67
=== Code Execution Successful ===

2)
<?php
$size = 3;

// Print header
echo "    ";
for ($col = 1; $col <= $size; $col++) {
    echo str_pad($col, 6, " ", STR_PAD_RIGHT);
}
echo "\n";

// Print rows
for ($row = 1; $row <= $size; $row++) {
    echo $row . " ";
    for ($col = 1; $col <= $size; $col++) {
        $result = $row / $col;
        echo str_pad(number_format($result, 2), 6, " ", STR_PAD_RIGHT);
    }
    echo "\n";
}
?>
output:
   1     2     3     
1 1.00  0.50  0.33  
2 2.00  1.00  0.67  
3 3.00  1.50  1.00  
=== Code Execution Successful ===

4)
$animal = “antelope”; 
$animal_heads = 1; 
$animal_legs = 4;
echo “The $animal has $animal_heads head(s).”;
echo “The $animal has $animal_legs leg(s).”;
output:
The antelope has 1 head(s).The antelope has 4 leg(s).
=== Code Execution Successful ===

5)
<?php
$items = [];
for ($i = 1; $i <= 3; $i++) {
    // You can use readline() if running interactively
    $price = (float) readline("Enter price for item $i: ");
    $qty = (int) readline("Enter quantity for item $i: ");    
    $items[] = ['price' => $price, 'qty' => $qty];
}
$subtotal = 0;
foreach ($items as $item) {
    $subtotal += $item['price'] * $item['qty'];
}
$tax = $subtotal * 0.10;
$total = $subtotal + $tax;
echo "\n------ Purchase Summary ------\n";
echo "Subtotal: Rs. " . number_format($subtotal, 2) . "\n";
echo "Tax (10%): Rs. " . number_format($tax, 2) . "\n";
echo "Total Cost: Rs. " . number_format($total, 2) . "\n";
output:
Enter price for item 1: 100
Enter quantity for item 1: 2
Enter price for item 2: 50
Enter quantity for item 2: 1
Enter price for item 3: 200
Enter quantity for item 3: 1
------ Purchase Summary ------
Subtotal: Rs. 450.00
Tax (10%): Rs. 45.00
Total Cost: Rs. 495.00
=== Code Execution Successful ===

6)
<?php
session_start();
$_SESSION['username'] = "Monika";
setcookie("user", "Monika Sri", time() + 3600); // Set cookie (may not work in some online compilers)
?>
<!DOCTYPE html>
<html>
<head>
    <title>PHP Data Passing - Online Compiler Version</title>
</head>
<body>
<h2>POST Method</h2>
<form method="post">
    Enter your name: <input type="text" name="name"><br>
    Enter your age: <input type="number" name="age"><br>
    <input type="submit" name="submit" value="Submit via POST">
</form>
<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $name = $_POST['name'] ?? 'No Name';
    $age = $_POST['age'] ?? 'No Age';
    echo "<h3>Received via POST:</h3>";
    echo "Name: $name<br>";
    echo "Age: $age<br><br>";
}
echo "<h3>SESSION Example:</h3>";
echo "Username from session: " . ($_SESSION['username'] ?? 'Not Set') . "<br><br>";
echo "<h3>COOKIE Example:</h3>";
echo "User from cookie: " . ($_COOKIE['user'] ?? 'Not Available in Online Compiler') . "<br>";
?>
</body>
</html>
output:
POST Method
Enter your name: 
Enter your age: 
SESSION Example:
Username from session: Monika
COOKIE Example:
User from cookie: Not Available in Online Compiler

7)
<?php
$name = "Monika"; // Change this to "" to simulate blank input
if (trim($name) == "") {
    echo "Error: Name field cannot be empty!";
} else {
    echo "Hello, $name! Welcome to Everyone!<br>";
    echo "Have a nice day!!";
}
?>
output:
Hello, Monika! Welcome to Everyone!
Have a nice day!!

8)
<?php
function deal() {
    $costA = 25;
    $sizeA = 11;
    $costB = 23;
    $sizeB = 9;
    $costPerUnitA = $costA / $sizeA;
    $costPerUnitB = $costB / $sizeB;
    echo "Cost per ml of Drink A: " . round($costPerUnitA, 2) . " Rs/ml<br>";
    echo "Cost per ml of Drink B: " . round($costPerUnitB, 2) . " Rs/ml<br>";
    if ($costPerUnitA < $costPerUnitB) {
        echo "<strong>Choose Drink A to save money.</strong>";
    } elseif ($costPerUnitB < $costPerUnitA) {
        echo "<strong>Choose Drink B to save money.</strong>";
    } else {
        echo "<strong>Both drinks cost the same per unit. Choose any.</strong>";
    }
}
deal();
?>
output:
Cost per ml of Drink A: 2.27 Rs/ml
Cost per ml of Drink B: 2.56 Rs/ml
Choose Drink A to save money.

9)
<?php
$my_var = "this";         
$that = "that";
$the_other = 2.2;
$not_set = "";            
print("$my_var,$not_set,{$that}+{$the_other}");
?>
Output:
this,,that+2.2

10)
<?php
$marks = 90;
echo "Student Marks: $marks%<br>";
if ($marks >= 75) {
    echo "Grade: First Class";
} elseif ($marks >= 60 && $marks <= 74) {
    echo "Grade: Second Class";
} elseif ($marks >= 40 && $marks <= 59) {
    echo "Grade: Third Class";
} else {
    echo "Grade: Fail";
}
?>
Output
Student Marks: 90%
Grade: First Class

11)
<?php
$dayNumber = date("w");
switch ($dayNumber) {
    case 0:
        echo "Today is Sunday";
        break;
    case 1:
        echo "Today is Monday";
        break;
    case 2:
        echo "Today is Tuesday";
        break;
    case 3:
        echo "Today is Wednesday";
        break;
    case 4:
        echo "Today is Thursday";
        break;
    case 5:
        echo "Today is Friday";
        break;
    case 6:
        echo "Today is Saturday";
        break;
    default:
        echo "Invalid day";
}
?>
Output:
Today is Friday 

12)
<?php
$sub = substr((string)12345, 2, 2);
echo "sub is $sub";
?>
Output:
sub is 34

13)
Sum of the digits
<?php
$number = 9876;
$sum = 0;
$temp = $number;
while ($number > 0) {
    $digit = $number % 10;  
    $sum += $digit;            
    $number = (int)($number / 10); 
}
echo "Sum of digits of $temp is: $sum";
?>
Output:
Sum of digits of 9876 is: 30

14)<?php
function addNumbers($num1, $num2) {
    return $num1 + $num2;
}
$result = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $number1 = $_POST['number1'];
    $number2 = $_POST['number2'];
    $result = addNumbers($number1, $number2);
}
?>
<html>
<head>
    <title>Sum of Two Numbers</title>
</head>
<body>
<h2>Add Two Numbers</h2>
<form method="post">
    Number 1: <input type="number" name="number1" required><br><br>
    Number 2: <input type="number" name="number2" required><br><br>
    <input type="submit" value="Add">
</form>
<?php
if ($result !== "") {
    echo "<h3>Result: $result</h3>";
}
?>
</body>
</html>

15)
<?php
$text = "PHP is easy to learn. PHP is powerful. I love PHP!";
$word = "PHP";
$count = substr_count($text, $word);
echo "The word '$word' occurs $count times in the given string.";
?>
Output:
The word 'PHP' occurs 3 times in the given string. 

16)
17)<?php
$balance = 5000; 
function deposit($amount, &$balance) {
    if ($amount > 0) {
        $balance += $amount;
        echo "Deposited: ₹$amount <br>";
    } else {
        echo "Invalid deposit amount.<br>";
    }
}
function withdraw($amount, &$balance) {
    if ($amount > 0) {
        if ($amount <= $balance) {
            $balance -= $amount;
            echo "Withdrawn: ₹$amount <br>";
        } else {
            echo "Insufficient balance.<br>";
        }
    } else {
        echo "Invalid withdrawal amount.<br>";
    }
}
echo "<h2>Bank Transactions</h2>";
echo "Opening Balance: ₹$balance <br><br>";
deposit(2000, $balance);
withdraw(1000, $balance);
?>
Output:
Bank Transactions
Opening Balance: ₹5000 
Deposited: ₹2000 
Withdrawn: ₹1000 

18)
<?php
$name = "John";
if (isset($name)) {
    echo "The variable \$name is set and not NULL.<br>";
} else {
    echo "The variable \$name is not set or is NULL.<br>";
}
$age = NULL;
if (isset($age)) {
    echo "The variable \$age is set.<br>";
} else {
    echo "The variable \$age is not set or is NULL.<br>";
}
$city = "New York";
if (isset($name, $city)) {
    echo "Both \$name and \$city are set.<br>";
} else {
    echo "One or more variables are not set.<br>";
}
?>
Output:
The variable $name is set and not NULL.
The variable $age is not set or is NULL.
Both $name and $city are set.

19)
<?php
function findHighLow($numbers) {
    $highest = max($numbers);
    $lowest = min($numbers);
    return array("highest" => $highest, "lowest" => $lowest);
}
$result = null;
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $numbers = explode(",", $_POST['numbers']);
    $numbers = array_map('intval', $numbers);
    $result = findHighLow($numbers);
}
?>
<html>
<head>
    <title>Highest and Lowest Finder</title>
</head>
<body>
<h2>Find Highest & Lowest Number</h2>
<form method="post">
    Enter numbers (comma separated): 
    <input type="text" name="numbers" placeholder="e.g. 10, 20, 5, 30" required>
    <br><br>
    <input type="submit" value="Find">
</form>
<?php
if ($result) {
    echo "<h3>Highest Value: " . $result['highest'] . "</h3>";
    echo "<h3>Lowest Value: " . $result['lowest'] . "</h3>";
}
?>
</body>
</html>
20)<?php
$name = $email = $message = "";
$error = "";
$success = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty($_POST["name"]) || empty($_POST["email"]) || empty($_POST["message"])) {
        $error = "All fields are required!";
    } else {
        $name = $_POST["name"];
        $email = $_POST["email"];
        $message = $_POST["message"];
        $success = "Message sent successfully!";
    }
}
?>
<html>
<head>
    <title>Simple Contact Form</title>
</head>
<body>
<h2>Contact Form</h2>
<?php
if ($error) echo "<p style='color:red;'>$error</p>";
if ($success) echo "<p style='color:green;'>$success</p>";
?>
<form method="post">
    Name: <input type="text" name="name"><br><br>
    Email: <input type="email" name="email"><br><br>
    Message: <textarea name="message"></textarea><br><br>
    <input type="submit" value="Send">
</form>
</body>
</html>

21)
<?php
function isLeapYear($year) {
    if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
        return true;
    } else {
        return false;
    }
}
$year = 2024;

if (isLeapYear($year)) {
    echo "$year is a Leap Year.";
} else {
    echo "$year is NOT a Leap Year.";
}
?>
Output:
2024 is a Leap Year. 

22)
<?php
$text = "PHP is easy to learn. PHP is powerful. I love PHP!";
$word = "PHP";
$count = substr_count($text, $word);
echo "The word '$word' occurs $count times in the given string.";
?>
Output:
The word 'PHP' occurs 3 times in the given string. 

23)
<?php
if (isset($_GET['city'])) {
    $city = $_GET['city'];
    echo "Showing weather for: $city<br>";
}
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST['username'];
    $password = $_POST['password']; // Normally you'd verify this
    echo "Welcome, $username!<br>";
}
?>
<html>
<head>
    <title>GET vs POST Example</title>
</head>
<body>
<h2>Check Weather (GET)</h2>
<form method="get">
    City: <input type="text" name="city" required>
    <input type="submit" value="Check">

24)
<?php
$text = "  Hello World from PHP!  ";
echo "Original String: '$text'<br><br>";
echo "Trim: '" . trim($text) . "'<br>";
echo "Lowercase: " . strtolower($text) . "<br>";
echo "Uppercase: " . strtoupper($text) . "<br>";
echo "Length: " . strlen($text) . "<br>";
echo "Word Count: " . str_word_count($text) . "<br>";
echo "Reversed: " . strrev($text) . "<br>";
echo "Replace 'PHP' with 'Programming': " . str_replace("PHP", "Programming", $text) . "<br>";
echo "Position of 'World': " . strpos($text, "World") . "<br>";
echo "Substring (chars 2 to 8): " . substr($text, 2, 7) . "<br>";
echo "Repeat 3 times: " . str_repeat("Hi! ", 3) . "<br>";
echo "Shuffled: " . str_shuffle($text) . "<br>";
echo "Compare 'apple' & 'banana': " . strcmp("apple", "banana") . "<br>";
echo "Add Slashes: " . addslashes($text) . "<br>";
$html = "<b>Hello</b> <i>World</i>";
echo "Remove HTML tags: " . strip_tags($html) . "<br>";
?>
Output:
Original String: ' Hello World from PHP! '
Trim: 'Hello World from PHP!'
Lowercase: hello world from php! 
Uppercase: HELLO WORLD FROM PHP! 
Length: 25
Word Count: 4
Reversed: !PHP morf dlroW olleH 
Replace 'PHP' with 'Programming': Hello World from Programming! 
Position of 'World': 8
Substring (chars 2 to 8): Hello W
Repeat 3 times: Hi! Hi! Hi! 
Shuffled: mlH l Hfr oeldo o WP!Pr
Compare 'apple' & 'banana': -1
Add Slashes: Hello World from PHP! 
Remove HTML tags: Hello World

25)
<?php
$text = "The Thing will come to you soon";
$newText = preg_replace('/the/i', 'best', $text, 1);
echo "Original: $text<br>";
echo "Modified: $newText";
?>
Output:
Original: The Thing will come to you soon
Modified: best Thing will come to you soon

26)
<html>
<head>
    <title>PHP Chess Board</title>
    <style>
        table {
            border: 2px solid black;
            border-collapse: collapse;
        }
        td {
            width: 60px;
            height: 60px;
        }
    </style>
</head>
<body>
<h2>Chess Board in PHP</h2>
<?php
echo "<table>";
for ($row = 1; $row <= 8; $row++) {
    echo "<tr>";
    for ($col = 1; $col <= 8; $col++) {
        // Alternate colors
        if (($row + $col) % 2 == 0) {
            echo "<td style='background-color: white;'></td>";
        } else {
            echo "<td style='background-color: black;'></td>";
        }
    }
    echo "</tr>";
}
echo "</table>";
?>
</body>
</html>

27)
<?php
$a = 15;
$b = 4;
echo "a = $a, b = $b<br><br>";
echo "Addition (+): " . ($a + $b) . "<br>";        
echo "Subtraction (-): " . ($a - $b) . "<br>";    
echo "Multiplication (*): " . ($a * $b) . "<br>"; 
echo "Division (/): " . ($a / $b) . "<br>";  
echo "Modulus (%): " . ($a % $b) . "<br>";        
echo "Exponentiation (**): " . ($a ** $b) . "<br>"; 
?>
Output:
a = 15, b = 4
Addition (+): 19
Subtraction (-): 11
Multiplication (*): 60
Division (/): 3.75
Modulus (%): 3
Exponentiation (**): 50625

28)
<?php
$a = 10;
$b = "10";
$c = 20;
echo "Check if \$a == \$b: ";
var_dump($a == $b);
echo "Check if \$a === \$b: ";
var_dump($a === $b);
echo "Check if \$a == \$b && \$b == \$c: ";
var_dump($a == $b && $b == $c); 
echo "Check if \$a === \$b && \$b === \$c: ";
var_dump($a === $b && $b === $c);
?>
Output:
Check if $a == $b: bool(true) 
Check if $a === $b: bool(false)
Check if $a == $b && $b == $c: bool(false)
Check if $a === $b && $b === $c: bool(false) 

29)<?php
// 1. rand() - Random number
echo "<h3>rand() Example:</h3>";
echo "Random number: " . rand() . "<br>";
echo "Random number between 1 and 10: " . rand(1, 10) . "<br><br>";
// 2. abs() - Absolute value
echo "<h3>abs() Example:</h3>";
echo "Absolute of -15: " . abs(-15) . "<br>";
echo "Absolute of 7: " . abs(7) . "<br><br>";
// 3. str_replace() - Replace text
echo "<h3>str_replace() Example:</h3>";
$text = "I like apples";
echo "Before: $text<br>";
echo "After: " . str_replace("apples", "oranges", $text) . "<br><br>";
// 4. pi() - Value of Pi
echo "<h3>pi() Example:</h3>";
echo "Value of pi: " . pi() . "<br><br>";
// 5. ceil() - Round up
echo "<h3>ceil() Example:</h3>";
echo "ceil(4.3): " . ceil(4.3) . "<br>";
echo "ceil(9.1): " . ceil(9.1) . "<br>";
?>
Output:
rand() Example:
Random number: 818021494
Random number between 1 and 10: 9
abs() Example:
Absolute of -15: 15
Absolute of 7: 7
str_replace() Example:
Before: I like apples
After: I like oranges
pi() Example:
Value of pi: 3.1415926535898
ceil() Example:
ceil(4.3): 5
ceil(9.1): 10

30)
<?php
function generatePassword($length = 10) {   
    $characters = 'abc+-/123';  
    $password = '';
    $maxIndex = strlen($characters) - 1;
    for ($i = 0; $i < $length; $i++) {
        $randomIndex = rand(0, $maxIndex);
        $password .= $characters[$randomIndex];
    }
    return $password;
}
echo "Random Password: " . generatePassword(12); 
?>
Output:
Random Password: /a2+/+3//cb+

31)
<?php
$fruits = array("apple", "banana", "cherry", "date");
array_shift($fruits); // Removes "apple"
print_r($fruits);
?>
Output:
Array
(
 [0] => banana
 [1] => cherry
 [2] => date
)

32) a)
<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>
Output:
Array
(
 [2] => emily
)
b) 
?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>
Output:
Array
(
 [2] => emily
)

33)
<?php
$matrix = array(
 array(1, 2, 3), // Row 1
 array(4, 5, 6), // Row 2
 array(7, 8, 9) // Row 3
);
echo "The value in the second row, third column is: $value";
?>
Output:
The value in the second row, third column is: 6

34)
<?php
$text = "The sky is blue. Blue is my favorite color. I like blue skies.";
$result = preg_replace("/\bblue\b/i", "green", $text);
echo $result;
?>
Output:
The value in the second row, third column is: 6

35)
<?php
$strings = array(
 "I love PHP programming",
 "JavaScript is fun",
 "PHP is great for web development"
);
$search = "PHP";
foreach ($strings as $text) {
 if (strpos($text, $search) !== false) { 
 echo "The string '$text' contains '$search'.<br>";
 } else {
 echo "The string '$text' does NOT contain '$search'.<br>";
 }
}
?>
Output:
The string 'I love PHP programming' contains 'PHP'.<br>The string 'JavaScript is fun' 
does NOT contain 'PHP'.<br>The string 'PHP is great for web development' contains 
'PHP'.<br>

36)
<?php
// Create an array of fruits
$fruits = array("Apple", "Banana", "Cherry", "Date", "Mango");
// Display the third element (index 2, since arrays are zero-indexed)
echo "The third fruit is: " . $fruits[2];
?>
Output:
The third fruit is: Cherry

37)
<?php
$fruits = array("Apple", "Banana");
array_push($fruits, "Cherry", "Mango");
echo "After Push: ";
print_r($fruits);
$removed = array_pop($fruits);
echo "Removed: $removed\n";
echo "After Pop: ";
print_r($fruits);
?>
Output:
After Push: Array
(
 [0] => Apple
 [1] => Banana
 [2] => Cherry
 [3] => Mango
)
Removed: Mango
After Pop: Array
(
 [0] => Apple
 [1] => Banana
 [2] => Cherry
)

38)
<?php
$fruits = array("Apple", "Banana", "Cherry", "Mango");
$i = 0;
$length = count($fruits);
while ($i < $length) {
 echo "Fruit at index $i: " . $fruits[$i] . "<br>";
 $i++;
}
?>
Output:
Fruit at index 0: Apple<br>Fruit at index 1: Banana<br>Fruit at index 2: Cherry<br>Fruit 
at index 3: Mango<br>

39)
<?php
$students = array(
 array("name" => "Alice", "score" => 92),
 array("name" => "Bob", "score" => 76),
 array("name" => "Charlie", "score" => 64),
 array("name" => "David", "score" => 58)
);
function calculateGrade($score) {
 if ($score >= 90) return "A";
 elseif ($score >= 80) return "B";
 elseif ($score >= 70) return "C";
 elseif ($score >= 60) return "D";
 else return "F";
}
$students = array_map(function($student) {
 $student["grade"] = calculateGrade($student["score"]);
 return $student;
}, $students);
$totalScore = array_sum(array_column($students, "score"));
$averageScore = $totalScore / count($students);
$gradeCounts = array_count_values(array_column($students, "grade"));
echo "<h2>Student Grades Report</h2>";
foreach ($students as $student) {
 echo "{$student['name']} - Score: {$student['score']} - Grade: {$student['grade']}<br>";
}
echo "<br><strong>Class Average:</strong> " . round($averageScore, 2) . "<br>";
echo "<strong>Grade Distribution:</strong><br>";
foreach ($gradeCounts as $grade => $count) {
 echo "Grade $grade: $count student(s)<br>";
}
?>
Output:
<h2>Student Grades Report</h2>Alice - Score: 92 - Grade: A<br>Bob - Score: 76 -
Grade: C<br>Charlie - Score: 64 - Grade: D<br>David - Score: 58 - Grade: 
F<br><br><strong>Class Average:</strong> 72.5<br><strong>Grade 
Distribution:</strong><br>Grade A: 1 student(s)<br>Grade C: 1 student(s)<br>Grade D: 
1 student(s)<br>Grade F: 1 student(s)<br>

40)
<?php
$text = "Hello@# World! 123_Ready?";
$chars = str_split($text);
$allowed = array_merge(
 range('a', 'z'),
 range('A', 'Z'),
 range('0', '9'),
 array(" ")
);
$resultArray = array_filter($chars, function($char) use ($allowed) {
 return in_array($char, $allowed);
});
$cleaned = implode("", $resultArray);
echo "Original: $text\n";
echo "Cleaned: $cleaned\n";
?>
output:
Original: Hello@# World! 123_Ready?
Cleaned: Hello World 123Ready

41)
<?php
$text = "Contact us at admin@example.com or support@mydomain.org. 
You can also email john.doe123@company.co.uk for more info.";
$pattern = '/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/i';
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
print_r($emails);
?>
Output:
(
 [0] => admin@example.com
 [1] => support@mydomain.org
 [2] => john.doe123@company.co.uk
)

42)
<?php
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
$allMarks = array_merge($marks1, $marks2, $marks3);
$maxMark = max($allMarks);
$minMark = min($allMarks);
echo "Maximum Mark: $maxMark<br>";
echo "Minimum Mark: $minMark";
?>
Output:
Maximum Mark: 635<br>Minimum Mark: 111

43)
<?php
$password = "Hello@123"; // Change to test different passwords
$pattern = '/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\W_]).{8,}$/';
if (preg_match($pattern, $password)) {
 echo " Valid password";
} else {
 echo " Invalid password";
}
?>
Output:
 Valid password

44)
<?php
$songs = [
 ["title" => "Shape of You", "artist" => "Ed Sheeran"],
 ["title" => "Blinding Lights", "artist" => "The Weeknd"],
 ["title" => "Someone Like You", "artist" => "Adele"],
 ["title" => "Believer", "artist" => "Imagine Dragons"]
];
$playlist = [];
array_push($playlist, $songs[0], $songs[2]); // Add Shape of You and Someone Like You
echo " Playlist:\n";
foreach ($playlist as $song) {
 echo "- {$song['title']} by {$song['artist']}\n";
}
$playlist[] = $songs[1]; // Add Blinding Lights
foreach ($playlist as $index => $song) {
 if ($song['title'] === "Shape of You") {
 unset($playlist[$index]);
 }
}
$playlist = array_values($playlist); // Reindex array
usort($playlist, function($a, $b) {
 return strcmp($a['title'], $b['title']);
});
echo "\n Final Playlist (Sorted):\n";
foreach ($playlist as $song) {
 echo "- {$song['title']} by {$song['artist']}\n";
}
?>
Output:
 Playlist:
- Shape of You by Ed Sheeran
- Someone Like You by Adele
 Final Playlist (Sorted):
- Blinding Lights by The Weeknd
- Someone Like You by Adele

45)
<?php
$fruits = array("apple", "banana", "orange", "mango", "grape");
$searchValue = "mango";
$index = array_search($searchValue, $fruits);
if ($index !== false) {
 echo "The index of '$searchValue' is: $index";
} else {
 echo "'$searchValue' not found in the array.";
}
?>
Output:
The index of 'mango' is: 3

46)
<?php
$fruits = array("apple", "banana", "orange", "mango", "grape");
$searchValue = "mango";
$index = array_search($searchValue, $fruits);
if ($index !== false) {
 echo "The index of '$searchValue' is: $index";
} else {
 echo "'$searchValue' not found in the array.";
}
?>
Output:
The index of 'mango' is: 3

47)
<?php
$x = array(1, 2, 3, 4, 5);
unset($x[2]);
$x = array_values($x);
foreach ($x as $value) {
 echo $value . " ";
}
?>
Output:
1 2 4 5

48)
<?php
$records = array("Apple", "Banana", "Cherry", "Date", "Elderberry");
$recordNumber = 3; // 4th record
echo "Record $recordNumber: " . $records[$recordNumber - 1]; // -1 because human 
count starts from 1
?>
Output:
Record 3: Cherry

49)
<?php
$players = [
 ["name" => "Alice", "goals" => 10, "assists" => 8, "fouls" => 2],
 ["name" => "Bob", "goals" => 7, "assists" => 12, "fouls" => 5],
 ["name" => "Charlie", "goals" => 15, "assists" => 5, "fouls" => 1],
 ["name" => "David", "goals" => 5, "assists" => 6, "fouls" => 0]
];
foreach ($players as $key => $player) {
 $performanceIndex = ($player['goals'] * 5) + ($player['assists'] * 3) - ($player['fouls'] * 
2);
 $players[$key]['performanceIndex'] = $performanceIndex;
}
$totalIndex = array_sum(array_column($players, 'performanceIndex'));
$averageIndex = $totalIndex / count($players);
usort($players, function ($a, $b) {
 return $b['performanceIndex'] <=> $a['performanceIndex'];
});
echo "Average Performance Index: " . round($averageIndex, 2) . "\n\n";
echo "Player Rankings:\n";
foreach ($players as $rank => $player) {
 echo ($rank+1) . ". " . $player['name'] . " - Index: " . $player['performanceIndex'] . "\n";
}
?>
Output:
Average Performance Index: 65.5
Player Rankings:
1. Charlie - Index: 88
2. Alice - Index: 70
3. Bob - Index: 61
4. David - Index: 43

50)
<?php
$players = array("Virat", "Rohit", "Dhoni", "Bumrah");
$lowercaseArray = array_map('strtolower', $players);
$uppercaseArray = array_map('strtoupper', $players);
echo "Original Array:\n";
print_r($players);
echo "\nLowercase Array:\n";
print_r($lowercaseArray);
echo "\nUppercase Array:\n";
print_r($uppercaseArray);
?>
Output:
Original Array:
Array
(
 [0] => Virat
 [1] => Rohit
 [2] => Dhoni
 [3] => Bumrah
)
Lowercase Array:
Array
(
 [0] => virat
 [1] => rohit
 [2] => dhoni
 [3] => bumrah
)
Uppercase Array:
Array
(
 [0] => VIRAT
 [1] => ROHIT
 [2] => DHONI
 [3] => BUMRAH
)

51)
<?php
$fruits = array("Apple", "Banana", "Cherry", "Mango");
echo "Original Array:\n";
print_r($fruits);
$removed = array_shift($fruits);
echo "\nAfter array_shift() (Removed: $removed):\n";
print_r($fruits);
array_unshift($fruits, "Strawberry", "Pineapple");
echo "\nAfter array_unshift():\n";
print_r($fruits);
?>
Output:
Original Array:
Array
(
 [0] => Apple
 [1] => Banana
 [2] => Cherry
 [3] => Mango
)
After array_shift() (Removed: Apple):
Array
(
 [0] => Banana
 [1] => Cherry
 [2] => Mango
)
After array_unshift():
Array
(
 [0] => Strawberry
 [1] => Pineapple
 [2] => Banana
 [3] => Cherry
 [4] => Mango
)

52)
<?php
echo "=== STACK (LIFO) Example ===\n";
$stack = array();
array_push($stack, "A");
array_push($stack, "B");
array_push($stack, "C");
echo "Stack after pushes: ";
print_r($stack);
$popped = array_pop($stack);
echo "Popped from stack: $popped\n";
echo "Stack after pop: ";
print_r($stack);
echo "\n";
echo "=== QUEUE (FIFO) Example ===\n";
$queue = array();
array_push($queue, "A");
array_push($queue, "B");
array_push($queue, "C");
echo "Queue after enqueue: ";
print_r($queue);
$dequeued = array_shift($queue);
echo "Dequeued from queue: $dequeued\n";
echo "Queue after dequeue: ";
print_r($queue);
?>
Output:
=== STACK (LIFO) Example ===
Stack after pushes: Array
(
 [0] => A
 [1] => B
 [2] => C
)
Popped from stack: C
Stack after pop: Array
(
 [0] => A
 [1] => B
)
=== QUEUE (FIFO) Example ===
Queue after enqueue: Array
(
 [0] => A
 [1] => B
 [2] => C
)
Dequeued from queue: A
Queue after dequeue: Array
(
 [0] => B
 [1] => C
)

53)
<?php
$numbers = [10, 20, 30, 40, 50];
echo "Original Array:\n";
print_r($numbers);
$lastElement = array_pop($numbers);
echo "\nAfter array_pop():\n";
echo "Removed Element: $lastElement\n";
print_r($numbers);
$firstElement = array_shift($numbers);
echo "\nAfter array_shift():\n";
echo "Removed Element: $firstElement\n";
print_r($numbers);
/*
Difference:
- array_pop() removes from the END of the array.
- array_shift() removes from the BEGINNING of the array.
*/
?>
Output:
Original Array:
Array
(
 [0] => 10
 [1] => 20
 [2] => 30
 [3] => 40
 [4] => 50
)
After array_pop():
Removed Element: 50
Array
(
 [0] => 10
 [1] => 20
 [2] => 30
 [3] => 40
)
After array_shift():
Removed Element: 10
Array
(
 [0] => 20
 [1] => 30
 [2] => 40
)

54)
<?php
$ticketQueue = [];
function bookTicket(&$queue, $personName) {
 array_push($queue, $personName); // Adds to the end of queue
 echo "$personName has booked a ticket and joined the queue.\n";
}
function serveTicket(&$queue) {
 if (!empty($queue)) {
 $person = array_shift($queue); // Removes from the start of queue
 echo "$person has been served and removed from the queue.\n";
 } else {
 echo "No one in the queue to serve.\n";
 }
}
function showQueue($queue) {
 if (empty($queue)) {
 echo "The queue is empty.\n";
 } else {
 echo "Current Queue: " . implode(", ", $queue) . "\n";
 }
}
bookTicket($ticketQueue, "Alice");
bookTicket($ticketQueue, "Bob");
bookTicket($ticketQueue, "Charlie");
showQueue($ticketQueue);
serveTicket($ticketQueue);
showQueue($ticketQueue);
serveTicket($ticketQueue);
showQueue($ticketQueue);
bookTicket($ticketQueue, "David");
showQueue($ticketQueue);
serveTicket($ticketQueue);
serveTicket($ticketQueue);
serveTicket($ticketQueue); // Trying to serve when queue is empty
?>
Output:
Alice has booked a ticket and joined the queue.
Bob has booked a ticket and joined the queue.
Charlie has booked a ticket and joined the queue.
Current Queue: Alice, Bob, Charlie
Alice has been served and removed from the queue.
Current Queue: Bob, Charlie
Bob has been served and removed from the queue.
Current Queue: Charlie
David has booked a ticket and joined the queue.
Current Queue: Charlie, David
Charlie has been served and removed from the queue.
David has been served and removed from the queue.
No one in the queue to serve.

55)
<?php
$string = "Hello World";
$charArray = str_split($string);
$stack = [];
foreach ($charArray as $char) {
 array_push($stack, $char);
}
$reversedString = "";
while (!empty($stack)) {
 $reversedString .= array_pop($stack);
}
echo "Original String: " . $string . "<br>";
echo "Reversed String: " . $reversedString;
?>
Output:
Original String: Hello World<br>Reversed String: dlroW olleH

56)
<?php
$fruits = ["banana", "apple", "cherry", "mango"];
sort($fruits);
print_r($fruits);
rsort($fruits);
print_r($fruits);
$prices = ["apple" => 50, "banana" => 20, "mango" => 40];
asort($prices);
print_r($prices);
ksort($prices);
print_r($prices);
?>
Output:
Array
(
 [0] => apple
 [1] => banana
 [2] => cherry
 [3] => mango
)
Array
(
 [0] => mango
 [1] => cherry
 [2] => banana
 [3] => apple
)
Array
(
 [banana] => 20
 [mango] => 40
 [apple] => 50
)
Array
(
 [apple] => 50
 [banana] => 20
 [mango] => 40
)

57)
<?php
$text = "Contact us at test@example.com or admin123@mail.com. 
Order 123 costs $45 and delivery takes 2 days. Hello World PHP";
preg_match_all("/[\w\.-]+@[\w\.-]+\.\w+/", $text, $emails);
echo "Extracted Emails:\n";
print_r($emails[0]);
preg_match_all("/\d+/", $text, $numbers);
echo "\nExtracted Numbers:\n";
print_r($numbers[0]);
$cleanText = preg_replace("/\s+/", " ", $text);
echo "\nText after removing extra spaces:\n";
echo $cleanText . "\n";
$fruitsText = "apple, banana orange,grape";
$parts = preg_split("/[\s,]+/", $fruitsText);
echo "\nSplit Text into Parts:\n";
print_r($parts);
?>
Output:
Extracted Emails:
Array
(
 [0] => test@example.com
 [1] => admin123@mail.com
)
Extracted Numbers:
Array
(
 [0] => 123
 [1] => 123
 [2] => 45
 [3] => 2
)
Text after removing extra spaces:
Contact us at test@example.com or admin123@mail.com. Order 123 costs $45 and 
delivery takes 2 days. Hello World PHP
Split Text into Parts:
Array
(
 [0] => apple
 [1] => banana
 [2] => orange
 [3] => grape
)

58)
<?php
$text = "For support contact support@example.com, for sales reach 
sales123@shop.com or admin@mail.org";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/";
preg_match_all($pattern, $text, $matches);
echo "Extracted Email Addresses:\n";
print_r($matches[0]);
?>
Output:
Extracted Email Addresses:
Array
(
 [0] => support@example.com
 [1] => sales123@shop.com
 [2] => admin@mail.org
)

59)
<?php
function calculateAverage($numbers) {
 if (empty($numbers)) {
 return 0; // Avoid division by zero
 }
 $sum = array_sum($numbers); // Sum all numbers
 $count = count($numbers); // Count total numbers
 $average = $sum / $count; // Calculate average
 return $average;
}
$nums = [10, 20, 30, 40, 50];
$avg = calculateAverage($nums);
echo "The average value is: " . $avg;
?>
Output:
The average value is: 30

60)
<?php
function searchValueInAssocArray($array, $valueToSearch) {
 $foundKeys = array_keys($array, $valueToSearch); // Get all keys with the value
 if (!empty($foundKeys)) {
 return $foundKeys;
 } else {
 return false; // Value not found
 }
}
$students = [
 "John" => 85,
 "Alice" => 90,
 "Bob" => 75,
 "Charlie" => 90
];
$searchValue = 90;
$result = searchValueInAssocArray($students, $searchValue);
if ($result !== false) {
 echo "Value $searchValue found at key(s): " . implode(", ", $result);
} else {
 echo "Value $searchValue not found in the array.";
}
?>
Output:
Value 90 found at key(s): Alice, Charlie

61)
<?php
$fruits = ["apple", "banana", "cherry"];
unset($fruits[1]);
$fruits = array_values($fruits);
print_r($fruits);
?>
Output:
Array
(
 [0] => apple
 [1] => cherry
)

62)
<?php
$values = [1.65, 1.65, -1.54];
foreach ($values as $value) {
 echo "Original: $value => Rounded: " . round($value, 1) . "<br>";
}
?>
output:
Original: 1.65 => Rounded: 1.7<br>Original: 1.65 => Rounded: 1.7<br>Original: -1.54 => 
Rounded: -1.5<br>

63)
<?php
function sumOfEvenNumbers($numbers) {
 $sum = 0;
 foreach ($numbers as $num) {
 if ($num % 2 == 0) { // Check if even
 $sum += $num;
 }
 }
 return $sum;
}
$array = [1, 2, 3, 4, 5, 6];
echo "Sum of even numbers: " . sumOfEvenNumbers($array);
?>
Output:
Sum of even numbers: 12

64)
<?php
$salesData = [
 2020 => 150,
 2021 => 165,
 2022 => 180,
 2023 => 210
];
$totalSales = array_sum($salesData);
$averageSales = $totalSales / count($salesData);
$growthRates = [];
$previousYearSales = null;
foreach ($salesData as $year => $sales) {
 if ($previousYearSales !== null) {
 $growthRate = (($sales - $previousYearSales) / $previousYearSales) * 100; // %
 $growthRates[$year] = round($growthRate, 2);
 }
 $previousYearSales = $sales;
}
$averageGrowthRate = array_sum($growthRates) / count($growthRates);
$forecastYears = 3;
$lastYear = max(array_keys($salesData));
$lastSales = end($salesData);
$forecast = [];
for ($i = 1; $i <= $forecastYears; $i++) {
 $lastSales = $lastSales * (1 + ($averageGrowthRate / 100)); // Apply growth rate
 $forecast[$lastYear + $i] = round($lastSales, 2);
}
echo "<h3>Sales Analysis Report</h3>";
echo "Total Sales: $totalSales K<br>";
echo "Average Sales: " . round($averageSales, 2) . " K<br>";
echo "Average Growth Rate: " . round($averageGrowthRate, 2) . "%<br><br>";
echo "<strong>Yearly Growth Rates:</strong><br>";
foreach ($growthRates as $year => $rate) {
 echo "$year: $rate%<br>";
}
echo "<br><strong>Sales Forecast:</strong><br>";
foreach ($forecast as $year => $value) {
 echo "$year: $value K<br>";
}
?>
Output:
<h3>Sales Analysis Report</h3>Total Sales: 705 K<br>Average Sales: 176.25 
K<br>Average Growth Rate: 11.92%<br><br><strong>Yearly Growth 
Rates:</strong><br>2021: 10%<br>2022: 9.09%<br>2023: 
16.67%<br><br><strong>Sales Forecast:</strong><br>2024: 235.03 K<br>2025: 263.05 
K<br>2026: 294.4 K<br>

65)
<?php
$mainString = "Welcome to the world of PHP programming!";
$searchString = "PHP";
if (strpos($mainString, $searchString) !== false) {
 echo "The string '$searchString' was found in the main string.";
} else {
 echo "The string '$searchString' was NOT found in the main string.";
}
?>
Output:
The string 'PHP' was found in the main string.

66)
<?php
$fruits = ["Apple", "Banana", "Cherry"];
echo "Using count(): " . count($fruits) . "<br>";
echo "Using sizeof(): " . sizeof($fruits) . "<br>";
$multiArray = ["Apple", "Banana", ["Cherry", "Mango"]];
echo "count() normal mode: " . count($multiArray) . "<br>";
echo "count() recursive mode: " . count($multiArray, COUNT_RECURSIVE) . "<br>";
echo "sizeof() recursive mode: " . sizeof($multiArray, COUNT_RECURSIVE) . "<br>";
?>
Output:
Using count(): 3<br>
Using sizeof(): 3<br>count() 
normal mode: 3<br>count() 
recursive mode: 5<br>sizeof() 
recursive mode: 5<br>

67)
<?php
$sentence = "PHP is great. PHP is powerful, and PHP is easy to learn.";
preg_match_all('/\b\w+\b/', strtolower($sentence), $matches);
$wordCounts = array_count_values($matches[0]);
echo "<h3>Word Frequency:</h3>";
foreach ($wordCounts as $word => $count) {
 echo "$word : $count<br>";
}
?>
Output:
<h3>Word Frequency:</h3>php : 3<br>is : 3<br>great : 1<br>powerful : 1<br>and : 
1<br>easy : 1<br>to : 1<br>learn : 1<br>

68)
<?php
try {
 $numerator = 10;
 $denominator = 0;
 if ($denominator == 0) {
 throw new Exception("Division by zero is not allowed.");
 }
 $result = $numerator / $denominator;
 echo "Result: $result";
} catch (Exception $e) {
 echo "Error: " . $e->getMessage();
}
?>
Output:
ERROR!
Error: Division by zero is not allowed.

69)
<?php
function changeArrayCase($array) {
 $lowerCaseArray = array_map('strtolower', $array);
 echo "Values are in lower case.<br>";
 print_r($lowerCaseArray);
 echo "<br><br>";
 $upperCaseArray = array_map('strtoupper', $array);
 echo "Values are in upper case.<br>";
 print_r($upperCaseArray);
}
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
changeArrayCase($Color);
?>
Output:
Values are in lower case.<br>Array
(
 [A] => blue
 [B] => green
 [c] => red
)
<br><br>Values are in upper case.<br>Array
(
 [A] => BLUE
 [B] => GREEN
 [c] => RED
)

70)
<?php
$input = "10, 20, 30, 40, 50";
$numbersArray = array_map('trim', explode(",", $input));
echo "Stored Numbers:\n";
print_r($numbersArray);
?>
Output:
Stored Numbers:
Array
(
 [0] => 10
 [1] => 20
 [2] => 30
 [3] => 40
 [4] =>50
)

71)
<?php
echo "=== Demonstrating PHP File Handling Modes (Simulated) ===\n\n";
$file = fopen("php://memory", "w+");
fwrite($file, "This is written in w mode.\n");
rewind($file);
echo "w mode output:\n" . stream_get_contents($file) . "\n\n";
$file = fopen("php://memory", "a+");
fwrite($file, "First line in a mode.\n");
fwrite($file, "Appended line in a mode.\n");
rewind($file);
echo "a mode output:\n" . stream_get_contents($file) . "\n\n";
$temp = fopen("php://memory", "w+");
fwrite($temp, "Reading in r mode.\n");
rewind($temp);
echo "r mode output:\n" . fread($temp, 1024) . "\n\n";
$temp = fopen("php://memory", "w+");
fwrite($temp, "Original text.\n");
rewind($temp);
fwrite($temp, "Edited in r+ mode.\n"); // Overwrites from start
rewind($temp);
echo "r+ mode output:\n" . stream_get_contents($temp) . "\n\n";
echo "x mode simulation: Creates a new file only if it does not exist.\n";
echo "(In online compilers, actual file creation is restricted.)\n";
?>
Output:
w mode output:
This is written in w mode.
a mode output:
First line in a mode.
Appended line in a mode.
r mode output:
Reading in r mode.
r+ mode output:
Edited in r+ mode.
x mode simulation: Creates a new file only if it does not exist.
(In online compilers, actual file creation is restricted.)

72)
<?php
session_start(); // Start the session
// (i) session_register() equivalent
// Old: session_register("username");
// New way:
$_SESSION["username"] = "JohnDoe";
$_SESSION["email"] = "john@example.com";
echo "<h3>Session Variables Registered:</h3>";
print_r($_SESSION);
// (ii) session_unset() - remove all session variables but keep session
session_unset();
echo "<br><br><strong>After session_unset():</strong><br>";
print_r($_SESSION);
// (iii) session_destroy() - remove session data completely
session_destroy();
echo "<br><br>Session destroyed.";
?>
Output:
<h3>Session Variables Registered:</h3>Array
(
 [username] => JohnDoe
 [email] => john@example.com
)
<br><br><strong>After session_unset():</strong><br>Array
(
)
<br><br>Session destroyed.

73)
<?php
$uploadedFileName = "sample.gif"; // Change this to test: e.g., "photo.jpg", "image.png"
$allowedExtensions = ['jpg', 'jpeg', 'png'];
$fileExtension = strtolower(pathinfo($uploadedFileName, PATHINFO_EXTENSION));
if (in_array($fileExtension, $allowedExtensions)) {
 echo " File accepted: $uploadedFileName\n";
} else {
 echo " Error: Only JPG or PNG files are allowed! ($uploadedFileName)\n";
}
?>
Output:
ERROR!
 Error: Only JPG or PNG files are allowed! 

74)
<?php
$fp = fopen("php://memory", "w+");
// 1. WRITE TO FILE (fwrite)
fwrite($fp, "Hello, this is PHP file handling in memory!\n");
fwrite($fp, "We are writing this text into a memory file.\n");
// Move pointer back to start for reading
rewind($fp);
// 2. READ FILE LINE BY LINE (fgets())
echo "Reading file line-by-line using fgets():\n";
while (!feof($fp)) {
 echo fgets($fp);
}
// 3. APPEND TO FILE
fseek($fp, 0, SEEK_END); // Move to end
fwrite($fp, "This line is appended at the end.\n");
rewind($fp);
echo "\nReading whole file after appending:\n";
while (!feof($fp)) {
 echo fgets($fp);
}
fclose($fp);
?>
Output:
Reading file line-by-line using fgets():
Hello, this is PHP file handling in memory!
We are writing this text into a memory file.
Reading whole file after appending:
Hello, this is PHP file handling in memory!
We are writing this text into a memory file.
This line is appended at the end.
=== Code Execution Successful ===

75)
<?php
function appendLineToFile($filename, $newLine) {
 $fp = fopen($filename, "a+"); // a+ = read/write and append mode
 if (!$fp) {
 echo "Unable to open file!";
 return;
 }
 fwrite($fp, $newLine . "\n");
 rewind($fp);
  echo "File content after appending:\n";
 while (!feof($fp)) {
 echo fgets($fp);
 }
 fclose($fp);
$filename = "php://memory";
$fp = fopen($filename, "w+");
fwrite($fp, "First line in file.\n");
fclose($fp);
appendLineToFile($filename, "This is the appended line");
?>
Output:
File content after appending:
This is the appended line

76)
